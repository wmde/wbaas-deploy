#!/bin/bash
set -eu

DEFAULT_DB_VERSION_FROM='mw1.38-wbs1'
DEFAULT_DB_VERSION_TO='mw1.39-wbs1'
DEFAULT_MW_BACKEND='mediawiki-138'

DB_VERSION_FROM=${DB_VERSION_FROM:-$DEFAULT_DB_VERSION_FROM}
DB_VERSION_TO=${DB_VERSION_TO:-$DEFAULT_DB_VERSION_TO}
MW_BACKEND=${MW_BACKEND:-$DEFAULT_MW_BACKEND}

WIKI_DOMAINS=''

Help() {
    echo "wiki-upgrade.sh: Dispatches the MediawikiUpdate Job for a list of individual wiki databases."
    echo "Also enables wgReadOnly setting for each wiki."
    echo
    echo "Usage: wiki-upgrade [-f] [-t] [-b] [-d]"
    echo
    echo "Available options (see below for defaults):"
    echo "  -f <db_version_from>"
    echo "  -t <db_version_to>"
    echo "  -b <mw_backend>"
    echo "  -d <wiki_domain>: specifies the wiki domain to be used"
    echo
    echo "Instead of specifying only one wiki domain with -d, you can also pipe a newline separated list of wiki domains into this script:"
    echo "example 1: 'cat domains.txt | ./wiki-upgrade'"
    echo "example 2: 'echo foobar.wikibase.cloud | ./wiki-upgrade'"
    echo
    echo "Also you can overwrite the default values for the following values with environment variables:"
    echo "  - DB_VERSION_FROM (default: ${DEFAULT_DB_VERSION_FROM})"
    echo "  - DB_VERSION_TO (default: ${DEFAULT_DB_VERSION_TO})"
    echo "  - MW_BACKEND (default: ${DEFAULT_MW_BACKEND})"
    echo
}

while getopts "f:t:b:d:" option; do 
    case $option in
        f)
            DB_VERSION_FROM="${OPTARG}";;
        t)
            DB_VERSION_TO="${OPTARG}";;
        b)
            MW_BACKEND="${OPTARG}";;
        d)
            WIKI_DOMAINS="${OPTARG}";;
        *)
            Help
            exit 1;;
   esac
done

dispatch_MediawikiUpdate() {
    WIKI_DOMAIN="$1"
    DB_VERSION_FROM="$2"
    DB_VERSION_TO="$3"
    MW_BACKEND="$4"

    echo "Dispatching MediawikiUpdate Job for wiki '${WIKI_DOMAIN}'"
    set -x
    time kubectl exec -t deployments/api-scheduler -- bash -c "php artisan job:dispatchNow MediawikiUpdate wikis.domain ${WIKI_DOMAIN} ${DB_VERSION_FROM} ${DB_VERSION_TO} ${MW_BACKEND}"

    # Undoing `set -x`: output gets messy quickly and for ops we are mainly interested in what we actually run with kubectl
    { set +x; } 2>/dev/null
}

date_echo() {
    echo -n "$(date --rfc-3339=seconds); "
    echo $1
}

echo "DB_VERSION_FROM = ${DB_VERSION_FROM}"
echo "DB_VERSION_TO = ${DB_VERSION_TO}"
echo "MW_BACKEND = ${MW_BACKEND}"
echo

# loop through stdin if no wiki domain was provided via -d
if [ -z "$WIKI_DOMAINS" ]; then
    echo "reading wiki domains from stdin"
    while read WIKI_DOMAIN; do
        WIKI_DOMAINS="${WIKI_DOMAINS} ${WIKI_DOMAIN}"
    done
fi

echo "This script will attempt to upgrade the following wikis:"
for WIKI_DOMAIN in $WIKI_DOMAINS; do
    echo "${WIKI_DOMAIN}"
done

echo
echo -n "Waiting 10 seconds ... "
echo

sleep 10

for WIKI_DOMAIN in $WIKI_DOMAINS; do
    echo "--------------------------------------------------------------------------"
    date_echo "Starting upgrade for '${WIKI_DOMAIN}'"
    dispatch_MediawikiUpdate "${WIKI_DOMAIN}" "${DB_VERSION_FROM}" "${DB_VERSION_TO}" "${MW_BACKEND}"
done

echo "--------------------------------------------------------------------------"
date_echo "Finished upgrade loop"
echo
echo "You can now point the upgraded wikis to the new mediawiki backends."
echo "Then you can disable the read-only mode again by running the script \`wiki-readonly\`"
echo