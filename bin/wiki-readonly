#!/bin/bash
set -eu

DEFAULT_VALUE='Maintenance'
VALUE=${DEFAULT_VALUE}
WIKI_DOMAINS=''

Help() {
    echo "wiki-readonly.sh: Sets or unsets the read-only setting for a list of wikis."
    echo
    echo "Usage: wiki-readonly [-d <wiki_domain>] [-u|-v <setting_value>]"
    echo
    echo "Available options (see below for defaults):"
    echo "  -d <wiki_domain>: specifies the wiki domain to be used"
    echo "  -v <setting_value>: sets the value of the \`wgReadOnly\` setting (default: '${DEFAULT_VALUE}')"
    echo "  -u: removes the setting for a wiki"
    echo
    echo "note: -u and -v cancel each other, the last provided option 'wins'."
    echo
    echo "Instead of specifying only one wiki domain with -d, you can also pipe a newline separated list of wiki domains into this script:"
    echo "example 1: 'cat domains.txt | ./wiki-readonly'"
    echo "example 2: 'echo foobar.wikibase.cloud | ./wiki-readonly'"
    echo

}

while getopts "d:v:u" option; do 
    case $option in
        d)
            WIKI_DOMAINS="${OPTARG}";;
        v)
            VALUE="${OPTARG}";;
        u)
            VALUE="";;
        *)
            Help
            exit 1;;
   esac
done

set_readonly() {
    WIKI_DOMAIN="$1"
    VALUE="$2"

    if [ -z "$VALUE" ]; then
        echo "Unsetting wgReadOnly for wiki: $1"
    else
        echo "Setting wgReadOnly ('$2') for wiki: $1"
    fi

    set -x
    kubectl exec -t deployment/api-app-backend -- bash -c "php artisan wbs-wiki:setSetting domain ${WIKI_DOMAIN} wgReadOnly ${VALUE}"
    
    # Undoing `set -x`: output gets messy quickly and for ops we are mainly interested in what we actually run with kubectl
    { set +x; } 2>/dev/null
}

# loop through stdin if no wiki domain was provided via -d
if [ -z "$WIKI_DOMAINS" ]; then
    echo "reading wiki domains from stdin"
    while read WIKI_DOMAIN; do
        WIKI_DOMAINS="${WIKI_DOMAINS} ${WIKI_DOMAIN}"
    done
fi

for WIKI_DOMAIN in $WIKI_DOMAINS; do
    set_readonly "$WIKI_DOMAIN" "$VALUE"
done
