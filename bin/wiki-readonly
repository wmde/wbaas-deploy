#!/bin/bash
set -eu

[ -t 0 ] && echo "Error: please pipe a list of wiki domains (separated by newline) into this script. example: 'cat domains.txt | $0'" && exit 1

## wiki-readonly.sh
# Sets or unsets the read-only setting for a list of wikis.
#
# Usage: pipe a newline separated list of wiki domains into this script.
# example 1: 'cat domains.txt | ./wiki-readonly'
# example 2: 'echo foobar.wikibase.cloud | ./wiki-readonly'
#
# Available options (see below for defaults):
# -v: sets the value of the `wgReadOnly` setting
# -u: removes the setting for a wiki
#
# note: last provided option "wins" :P

DEFAULT_VALUE='Maintenance'
VALUE=${DEFAULT_VALUE}

while getopts "v::u" option; do 
    case $option in
        v)
            VALUE="$OPTARG";;
        u)
            VALUE="";;
        *)
            echo
            echo "Available options:"
            echo "  -u (optional, removes the read-only setting)"
            echo "  -s <wgReadOnlyValue> (optional, default: '$DEFAULT_VALUE')"
            exit 2;;
   esac
done

set_readonly() {
    WIKI_DOMAIN="$1"
    VALUE="$2"

    if [ -z "$VALUE" ]; then
        echo "Unsetting wgReadOnly for wiki: $1"
    else
        echo "Setting wgReadOnly ('$2') for wiki: $1"
    fi

    set -x
    kubectl exec -t deployment/api-app-backend -- bash -c "php artisan wbs-wiki:setSetting domain ${WIKI_DOMAIN} wgReadOnly ${VALUE}"
    
    # Undoing `set -x`: output gets messy quickly and for ops we are mainly interested in what we actually run with kubectl
    { set +x; } 2>/dev/null
}

while read WIKI_DOMAIN; do
    set_readonly "$WIKI_DOMAIN" "$VALUE"
done
