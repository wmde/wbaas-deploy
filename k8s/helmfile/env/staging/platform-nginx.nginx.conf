# When listing a BUNCH of stuff in a map, this needed bumping..
map_hash_bucket_size 128;

map $dbversion $mwversion {
        mw1.39-wbs1 139-app;
}

# Figure out which group of backends we might want to send the request to based on uri
# TODO add Special:EntityData???
map $request_uri $mwgroup {
        ~^/()(w/load.php.*) "web";
        ~^/()(w/api.php.*) "api";
        ~^/()(w/rest.php.*) "api";
        default "web";
}

map $request_uri $robots {
default "User-agent: *
Disallow: /";
}

server {
        listen 8080;
        server_name _; # This is just an invalid value which will never trigger on a real hostname.

        # Resolver is needed when using variables in proxy_pass directives...
        # https://serverfault.com/a/937172
        # https://github.com/kubernetes-sigs/aws-load-balancer-controller/issues/795#issuecomment-451257479
        resolver kube-dns.kube-system.svc.cluster.local valid=10s;

        # IP range matches current kubernetes pod IPs
        set_real_ip_from  10.0.0.0/14;
        real_ip_header X-Forwarded-For;
        proxy_set_header X-Forwarded-For "$proxy_add_x_forwarded_for";

        client_max_body_size                    1m;

        port_in_redirect off;

        proxy_set_header Host                   $http_host;

        # mitigate HTTPoxy Vulnerability
        # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
        proxy_set_header Proxy                  "";

        proxy_redirect                          off;
        proxy_request_buffering                 on;
        proxy_http_version                      1.1;

        proxy_cookie_domain                     off;
        proxy_cookie_path                       off;

        # In case of errors try the next upstream server before returning an error
        proxy_next_upstream                     error timeout;
        proxy_next_upstream_timeout             0;
        proxy_next_upstream_tries               3;

        # Custom headers to proxied server
        proxy_connect_timeout                   5s;
        proxy_send_timeout                      60s;
        proxy_read_timeout                      60s;

        proxy_buffering                         off;
        proxy_buffer_size                       4k;
        proxy_buffers                           4 4k;

        proxy_max_temp_file_size                1024m;

        # Allowoverriding the group decision using the magic header
        if ($http_x_wbstack_alpha) {
                set $mwgroup "alpha";
        }

        # Allowoverriding the group decision for special wikis
        if ($host = "anton2.wikibase.dev") {
                set $mwgroup "alpha";
        }

        # Allow wbqc1.wikibase.dev to point to mediawiki-alpha deployment for PM experiments
        if ($host = "wbqc1.wikibase.dev") {
                set $mwgroup "alpha";
        }

        # Allow wbqc-2.wikibase.dev to point to mediawiki-alpha deployment for PM experiments
        if ($host = "wbqc-2-alpha.wikibase.dev") {
                set $mwgroup "alpha";
        }

        ############# Locations #############

        location = /kube-probe {
                add_header Content-Type text/plain;
                return 200 'gangnam style!';
        }

        location = /version {
                internal;
                proxy_buffering on;
                proxy_pass http://api-app-backend.default.svc.cluster.local/backend/ingress/getWikiVersionForDomain?domain=$host;
                proxy_pass_request_body off;
                proxy_set_header Content-Length "";
                proxy_set_header X-Original-URI $request_uri;
                proxy_cache version_cache;
                proxy_cache_key $host;
                proxy_cache_valid any 5m;
                proxy_ignore_headers Cache-Control;
                add_header X-Cache-Status $upstream_cache_status;
	}

        location = /version_error {
                internal;
                add_header Content-Type text/plain;
                return 400 'The requested wiki "$host" may never have existed or may now be deleted.';
        }

        location = /robots.txt {
                add_header Content-Type text/plain;
                return 200 $robots;
        }

        location ~* "^/(query/)(sparql.*)" {
                ########################################
                # --- START Blazegraph specific stuff ---
                ########################################

                # Make sure the blazegraph service is readonly
                # TODO maybe the headers and the only GET AND POST should mvoe to the gateway?
                proxy_set_header X-BIGDATA-MAX-QUERY-MILLIS 60000;
                proxy_set_header X-BIGDATA-READ-ONLY "yes";
                limit_except GET OPTIONS POST {
                    deny all;
                }

                add_header Access-Control-Allow-Origin * always;

                # Cache on clients for 5 mins
                add_header Cache-Control "public, max-age=300";
                add_header Vary Accept;

                # Proxy result buffering (not even sure if we want this)
                client_body_buffer_size 1m;
                proxy_buffering on;
                proxy_buffer_size 16k;
                proxy_buffers 256 16k;
                proxy_busy_buffers_size 256k;
                proxy_temp_file_write_size 16k;
                proxy_max_temp_file_size 10m;
                proxy_read_timeout 300;

                ########################################
                # --- END Blazegraph specific stuff ---
                ########################################

                rewrite "(?i)/(query/)(sparql.*)" /$2 break;
                proxy_pass http://queryservice-gateway.default.svc.cluster.local:80;

        }

        location ~* "^/(query)(.*)" {
                rewrite ^(/query)$ $1/ permanent;
                rewrite "(?i)/(query)(.*)" /$2 break;
                proxy_pass http://queryservice-ui:80;

        }

        location ~* "^/(tools/widar)(.*)" {
                rewrite ^(/tools/widar)$ $1/ permanent;
                rewrite "(?i)/(tools/widar)(.*)" /$2 break;
                proxy_pass http://tool-widar:80;

        }

        location ~* "^/(tools/cradle)(.*)" {
                rewrite ^(/tools/cradle)$ $1/ permanent;
                rewrite "(?i)/(tools/cradle)(.*)" /$2 break;
                proxy_pass http://tool-cradle:80;

        }

        location ~* "^/(tools/quickstatements)(.*)" {
                rewrite ^(/tools/quickstatements)$ $1/ permanent;
                rewrite "(?i)/(tools/quickstatements)(.*)" /$2 break;
                proxy_pass http://tool-quickstatements:80;
        }

        location ~* "^/()(.*)" {
                auth_request /version;
                error_page 401 = /version_error;
                auth_request_set $dbversion $upstream_http_x_version;
                add_header X-WBSTACK-MW-BACKEND mediawiki-$mwversion-$mwgroup;
                proxy_pass http://mediawiki-$mwversion-$mwgroup.default.svc.cluster.local:80;
                rewrite "(?i)/()(.*)" /$2 break;
        }
}
